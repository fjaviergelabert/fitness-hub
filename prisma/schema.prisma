generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id          Int               @id @default(autoincrement())
  name        String            @unique @db.VarChar(150)
  description String?           @db.Text
  mediaUrl    String?           @db.VarChar(255)
  workouts    WorkoutExercise[]
}

model Workout {
  id           Int               @id @default(autoincrement())
  name         String            @unique @db.VarChar(150)
  description  String?           @db.Text
  exercises    WorkoutExercise[]
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  userWorkouts UserWorkout[]
}

model WorkoutExercise {
  id                  Int                   @id @default(autoincrement())
  type                ExerciseType          @default(NONE)
  orderId             Int                   @default(0)
  exercise            Exercise              @relation(fields: [exerciseId], references: [id])
  exerciseId          Int
  workout             Workout               @relation(fields: [workoutId], references: [id])
  workoutId           Int
  userWorkoutExercise UserWorkoutExercise[]
}

enum ExerciseType {
  NONE
  TIMER
  MAX_REPS
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workout     Workout[]
  userWorkout UserWorkout[]
}

enum UserRole {
  USER
  PERSONAL_TRAINER
  ADMIN
}

model UserWorkout {
  id        Int                   @id @default(autoincrement())
  workoutId Int
  workout   Workout               @relation(fields: [workoutId], references: [id])
  userId    String
  user      User                  @relation(fields: [userId], references: [id])
  exercises UserWorkoutExercise[]
  duration  Float                 @default(0)
}

model UserWorkoutExercise {
  id                Int             @id @default(autoincrement())
  notes             String?         @db.Text
  reps              Int             @default(0)
  weight            Int             @default(0)
  time              Int             @default(0)
  workoutExerciseId Int
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id])
  userWorkoutId     Int
  userWorkout       UserWorkout     @relation(fields: [userWorkoutId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
